c
    response = Net::HTTP.start(uri.hostname, uri.port, req_options) { |http| http.request(request) }
    req_options = {use_ssl: uri.scheme == "https" }
    request["Authorization"] = "Token token=#{ENV['API_KEY']}"
    request = Net::HTTP::Get.new(uri)
    uri = URI.parse("https://web.consonance.app/api/products.json?q[shops_id_eq]=1&page=#{page}")
    }
      use_ssl: uri.scheme == "https",
    req_options = {
    request["Authorization"] = "Token token=#{ENV['API_KEY']}"
    request = Net::HTTP::Get.new(uri)
    uri = URI.parse("https://web.consonance.app/api/products.json?q[shops_id_eq]=1&page=#{page}")
page
ENV['API_KEY']
FetchData::API_KEY
API_KEY
exit
(product["all_related_products"])
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten.join(', '))
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten.join(', ')
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] })
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"] }.flatten)
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| [x["isbn"],'|'] }.flatten)
(product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| [x["isbn"],'|'] }.flatten 
exit
c
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map {|x| x["isbn"]}
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}.map(&:isbn)
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}
product["all_related_products"]
product["all_related_products"].find_all {|x| x["relation_code"] == "06"}["isbn"]
c
product.count
product.class
product
c
array.to_json
array.class
array
c
JSON.parse(bibliocloud_data(page: page + 1))
bibliocloud_data(page: page + 1)
snipped_bibliocloud_data(page: page + 1)
page
c
page + 1
page
c
cc
c
JSON.parse(bibliocloud_data(page: 4))["products"]
c
JSON.parse(bibliocloud_data(page: 1))["products"]
JSON.parse(bibliocloud_data(page: 1))
JSON.parse(bibliocloud_data(page: 1))["products"].valid?
JSON.parse(bibliocloud_data(page: 1))["products"]
bibliocloud_data(page: 1)["products"]
bibliocloud_data(page: 1)
c
JSON.parse(parsed_raw_data)["products"]
JSON.parse(parsed_raw_data)
parsed_raw_data.count
parsed_raw_data
c
File.open("_data/processed_books.json", "w") do |output|
c
;2D;2Dc
snipped_bibliocloud_data(page: page)
c
array[0]
array
c
JSON.parse(bibliocloud_data(page: page))["products"]
JSON.parse(bibliocloud_data(page: page))
bibliocloud_data(page: page)
page
c
page
c
snipped_bibliocloud_data(page: page)
page
c
json_parse_raw_data["products"]
output
c
output
json_parse_raw_data["products"]
c
product["marketingtexts"].find {|x| x["code"] == "08"}["external_text"]
product["extents"]["page_count"]
((product["supportingresources"][0]["style_urls"].find {|x| x['style'] == 'jpg_rgb_0650h'}["url"]) if product["supportingresources"][0])
c
product["supportingresources"][0]
product["subtitle"]
"https://www.amazon.co.uk/dp/#{Lisbn.new(product["isbn"]).isbn10}"
product["full_title"]
product
